generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TipoUsuario {
  ADMIN_GERAL
  ADMIN_CLINICA
  EQUIPE_CLINICA
  TUTOR
}

enum CargoClinica {
  ADMIN_CLINICA
  VETERINARIO
  RECEPCIONISTA
  AUXILIAR
}

enum StatusAgendamento {
  AGENDADO
  CONFIRMADO
  REALIZADO
  CANCELADO
}

enum StatusPagamento {
  PENDENTE
  PAGO
  CANCELADO
}

enum MetodoPagamento {
  PIX
  CREDITO
  DEBITO
  DINHEIRO
}

enum StatusExame {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDO
}

model Clinica {
  id           Int                @id @default(autoincrement())
  nome         String
  cnpj         String?            @unique
  endereco     String?
  telefone     String?
  email        String?
  admin        User?              @relation("ClinicaAdmin", fields: [adminId], references: [id], onDelete: SetNull)
  adminId      Int?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  usuarios     UsuariosClinicas[]
  veterinarios Veterinario[]
  servicos     Servico[]
  pets         Pet[]
}

model User {
  id            Int                @id @default(autoincrement())
  nome          String
  email         String             @unique
  senhaHash     String
  telefone      String?
  tipo          TipoUsuario
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  clinicas      UsuariosClinicas[]
  pets          Pet[]
  veterinarios  Veterinario[]
  clinicasAdmin Clinica[]          @relation("ClinicaAdmin")
}

model UsuariosClinicas {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  clinica   Clinica      @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  clinicaId Int
  cargo     CargoClinica

  @@unique([userId, clinicaId])
  @@index([userId])
  @@index([clinicaId])
}

model Veterinario {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  clinica       Clinica       @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  clinicaId     Int
  crmv          String        @unique
  especialidade String?
  ativo         Boolean       @default(true)
  agendamentos  Agendamento[]
  exames        Exame[]

  @@index([userId])
  @@index([clinicaId])
  @@index([crmv])
}

model Pet {
  id           Int           @id @default(autoincrement())
  nome         String
  especie      String
  raca         String?
  dataNasc     DateTime?
  cor          String?
  peso         Float?
  sexo         String?
  observacoes  String?       @db.Text
  tutor        User          @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId      Int
  clinica      Clinica?      @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  clinicaId    Int?
  agendamentos Agendamento[]
  exames       Exame[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([tutorId])
  @@index([clinicaId])
}

model Servico {
  id           Int           @id @default(autoincrement())
  clinica      Clinica       @relation(fields: [clinicaId], references: [id], onDelete: Cascade)
  clinicaId    Int
  nome         String
  descricao    String?       @db.Text
  valorBase    Decimal       @db.Decimal(10, 2)
  duracaoMin   Int
  ativo        Boolean       @default(true)
  agendamentos Agendamento[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([clinicaId])
}

model Agendamento {
  id            Int               @id @default(autoincrement())
  pet           Pet               @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId         Int
  veterinario   Veterinario       @relation(fields: [veterinarioId], references: [id], onDelete: Cascade)
  veterinarioId Int
  servico       Servico           @relation(fields: [servicoId], references: [id], onDelete: Cascade)
  servicoId     Int
  dataHora      DateTime
  status        StatusAgendamento @default(AGENDADO)
  observacoes   String?           @db.Text
  pagamento     Pagamento?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([petId])
  @@index([veterinarioId])
  @@index([servicoId])
  @@index([dataHora])
}

model Pagamento {
  id            Int             @id @default(autoincrement())
  agendamento   Agendamento     @relation(fields: [agendamentoId], references: [id], onDelete: Cascade)
  agendamentoId Int             @unique
  valor         Decimal         @db.Decimal(10, 2)
  metodo        MetodoPagamento
  status        StatusPagamento @default(PENDENTE)
  dataPagamento DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([status])
}

model Exame {
  id            Int         @id @default(autoincrement())
  pet           Pet         @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId         Int
  veterinario   Veterinario @relation(fields: [veterinarioId], references: [id], onDelete: Cascade)
  veterinarioId Int
  tipoExame     String
  dataExame     DateTime
  resultado     String?     @db.Text
  arquivoUrl    String?
  status        StatusExame @default(PENDENTE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([petId])
  @@index([veterinarioId])
  @@index([dataExame])
  @@index([status])
}
